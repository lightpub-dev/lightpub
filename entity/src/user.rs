//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub id: Vec<u8>,
    pub username: String,
    pub domain: String,
    pub password: Option<String>,
    pub nickname: String,
    #[sea_orm(column_type = "Text")]
    pub bio: String,
    #[sea_orm(column_type = "Binary(16)", nullable)]
    pub avatar: Option<Vec<u8>>,
    #[sea_orm(unique)]
    pub url: Option<String>,
    pub inbox: Option<String>,
    pub shared_inbox: Option<String>,
    pub outbox: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub private_key: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub public_key: Option<String>,
    pub created_at: Option<DateTime>,
    pub fetched_at: Option<DateTime>,
    pub view_url: Option<String>,
    pub following: Option<String>,
    pub followers: Option<String>,
    pub auto_follow_accept: i8,
    pub auth_expired_at: Option<DateTime>,
    pub is_bot: i8,
    pub is_admin: i8,
    pub hide_follows: i8,
    pub preferred_inbox: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::note::Entity")]
    Note,
    #[sea_orm(has_many = "super::note_like::Entity")]
    NoteLike,
    #[sea_orm(has_many = "super::note_mention::Entity")]
    NoteMention,
    #[sea_orm(has_many = "super::notification::Entity")]
    Notification,
    #[sea_orm(has_many = "super::remote_public_key::Entity")]
    RemotePublicKey,
    #[sea_orm(
        belongs_to = "super::upload::Entity",
        from = "Column::Avatar",
        to = "super::upload::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Upload,
    #[sea_orm(has_one = "super::user_totp::Entity")]
    UserTotp,
    #[sea_orm(has_one = "super::user_totp_backup::Entity")]
    UserTotpBackup,
}

impl Related<super::note::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Note.def()
    }
}

impl Related<super::note_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NoteLike.def()
    }
}

impl Related<super::note_mention::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NoteMention.def()
    }
}

impl Related<super::notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notification.def()
    }
}

impl Related<super::remote_public_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RemotePublicKey.def()
    }
}

impl Related<super::upload::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Upload.def()
    }
}

impl Related<super::user_totp::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTotp.def()
    }
}

impl Related<super::user_totp_backup::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTotpBackup.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
