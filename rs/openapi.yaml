openapi: 3.0.0
info:
  title: Lightpub API
  version: 0.1.0
tags:
  - name: User
    description: User management
  - name: Post
    description: Post management
  - name: Feed
    description: Related to fetching posts
  - name: File
    description: File management
paths:
  /register:
    post:
      tags:
        - User
      security: []
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                nickname:
                  type: string
                password:
                  type: string
              required:
                - username
                - nickname
                - password
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    description: Internal user id of the newly created user
                required:
                  - user_id
        400:
          description: Bad request. Or user with the same username already exists. Or the server is not accepting new users.
  /login:
    post:
      tags:
        - User
      security: []
      summary: Login as a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: The auth token. Include this in the `Authorization` header as `Bearer <token>` for authentication.
                required:
                  - token
        401:
          description: Authentication failed
  /post:
    post:
      tags: ["Post"]
      summary: Create a new post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                privacy:
                  $ref: '#/components/schemas/PostPrivacy'
                content:
                  type: string
                  description: The body of the post. Make it null or undefined if you want to create a repost.
                reply_to_id:
                  type: string
                  description: The `id` of the post that this post is replying to. If this is set, `content` must not be null.
                repost_of_id:
                  type: string
                  description: If `content` is null, this is the `id` of the post that is being reposted. If `content` is not null, this is the `id` of the post that this post is quoting.
              required:
                - privacy
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: string
                required:
                  - post_id
  
  /user/{user_spec}/follow:
    put:
      tags: ["User"]
      summary: Follow a user
      parameters:
        - name: user_spec
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserSpecifier'
      responses:
        200:
          description: Success
        404:
          description: Target user not found
    delete:
      tags: ["User"]
      summary: Unollow a user
      parameters:
        - name: user_spec
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserSpecifier'
      responses:
        200:
          description: Success
        404:
          description: Target user not found
  /user/{user_spec}:
    get:
      tags:
        - User
      summary: Get user information
      security:
        - {}
        - loginToken: []
      parameters:
        - name: user_spec
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserSpecifier'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
  /upload:
    post:
      tags:
        - File
      summary: Upload a file
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        200:
          description: Success
  /user:
    put:
      summary: Update my profile
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                bio:
                  type: string
                avatar_id:
                  type: string
                  nullable: true
              required:
                - nickname
                - bio
      responses:
        200:
          description: Success
  /post/{post_id}:
    get:
      summary: Get a post
      tags:
        - Post
      security:
        - {}
        - loginToken: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostEntry'
        404:
          description: Post not found
  /user/{user_spec}/posts:
    get:
      summary: Get posts posted by a user
      tags:
        - Post
        - User
      security:
        - {}
        - loginToken: []
      parameters:
        - name: user_spec
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserSpecifier'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: The maximum number of posts to fetch
        - name: before_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Fetch posts created before this date
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostEntryPagination'
  /user/{user_spec}/followers:
    get:
      tags:
        - User
      summary: Get followers of a user
      security:
        - {}
        - loginToken: []
      parameters:
        - name: user_spec
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserSpecifier'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: The maximum number of followers to fetch
        - name: before_date
          required: false
          in: query
          schema:
            type: string
            format: date-time
          description: Fetch followers followed before this date
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowListEntryPagination'
  /user/{user_spec}/following:
    get:
      tags:
        - User
      summary: Get followings of a user
      security:
        - {}
        - loginToken: []
      parameters:
        - name: user_spec
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UserSpecifier'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: The maximum number of followings to fetch
        - name: before_date
          required: false
          in: query
          schema:
            type: string
            format: date-time
          description: Fetch followings followed before this date
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowListEntryPagination'
  /timeline:
    get:
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: The maximum number of posts to fetch
        - name: before_date
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Fetch posts created before this date
        - name: public
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Include public posts by users not followed by you
      tags:
        - Feed
      summary: Get timeline
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPostEntryPagination'
  
components:
  schemas:
    FollowListEntryPagination:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/FollowListEntry'
        next:
          type: string
          format: uri
          nullable: true
          description: The URI to fetch the next page of results. If this is null, there are no more results.
      required:
        - result
        - next
    UserPostEntryPagination:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/UserPostEntry'
        next:
          type: string
          format: uri
          nullable: true
          description: The URI to fetch the next page of results. If this is null, there are no more results.
      required:
        - result
        - next
    PostPrivacy:
      type: string
      enum:
        - public
        - unlisted
        - follower
        - private
    UserSpecifier:
      type: string
      description: The user specifier can be a username (@username or @username@host), a user ID (uuid), or a user URI (https://...).
    UserPostEntry:
      type: object
      properties:
        id:
          type: string
        uri:
          type: string
        author:
          $ref: '#/components/schemas/PostAuthor'
        content:
          type: string
          nullable: true
        privacy:
          $ref: '#/components/schemas/PostPrivacy'
        repost_of_id:
          type: string
          nullable: true
        reply_to_id:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        counts:
          $ref: '#/components/schemas/PostCounts'
        reposted_by_you:
          type: boolean
          nullable: true
        favorited_by_you:
          type: boolean
          nullable: true
        bookmarked_by_you:
          type: boolean
          nullable: true
      required:
        - id
        - uri
        - author
        - content
        - privacy
        - created_at
        - counts
    PostAuthor:
      type: object
      properties:
        id:
          type: string
        uri:
          type: string
        username:
          type: string
          example: sample_user
        host:
          type: string
          nullable: true
          example: example.com
        nickname:
          type: string
          example: Sample User
      required:
        - id
        - uri
        - username
        - host
        - nickname
    PostCounts:
      type: object
      properties:
        reactions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "+1"
              count:
                type: integer
            required:
              - name
              - count
        replies:
          type: integer
        reposts:
          type: integer
        quotes:
          type: integer
      required:
        - reactions
        - replies
        - reposts
        - quotes
    FollowListEntry:
      type: object
      properties:
        id:
          type: string
        uri:
          type: string
        username:
          type: string
        host:
          type: string
          nullable: true
        nickname:
          type: string
        avatar_id:
          type: string
          nullable: true
      required:
        - id
        - uri
        - username
        - host
        - nickname
        - avatar_id
  securitySchemes:
    loginToken:
      type: http
      scheme: bearer
      description: Bearer token for authentication. Token can be obtained from the `/login` endpoint.

security:
  - loginToken: []
