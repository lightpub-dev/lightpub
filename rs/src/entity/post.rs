//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use super::sea_orm_active_enums::Privacy;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "post")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Binary(BlobSize::Blob(Some(16)))"
    )]
    pub id: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(16)))")]
    pub poster_id: Vec<u8>,
    #[sea_orm(column_type = "Text", nullable)]
    pub content: Option<String>,
    pub inserted_at: DateTime,
    pub created_at: DateTime,
    pub privacy: Privacy,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(16)))", nullable)]
    pub reply_to_id: Option<Vec<u8>>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(16)))", nullable)]
    pub repost_of_id: Option<Vec<u8>>,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::post_hashtag::Entity")]
    PostHashtag,
    #[sea_orm(has_many = "super::post_like::Entity")]
    PostLike,
    #[sea_orm(has_many = "super::post_mention::Entity")]
    PostMention,
    #[sea_orm(has_many = "super::post_reaction::Entity")]
    PostReaction,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::PosterId",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::post_hashtag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostHashtag.def()
    }
}

impl Related<super::post_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostLike.def()
    }
}

impl Related<super::post_mention::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostMention.def()
    }
}

impl Related<super::post_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostReaction.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
