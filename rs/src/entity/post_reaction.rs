//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "post_reaction")]
pub struct Model {
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(16)))")]
    pub post_id: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(16)))")]
    pub user_id: Vec<u8>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(16)))")]
    pub reaction_id: Vec<u8>,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::post::Entity",
        from = "Column::PostId",
        to = "super::post::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Post,
    #[sea_orm(
        belongs_to = "super::reaction::Entity",
        from = "Column::ReactionId",
        to = "super::reaction::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Reaction,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reaction.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
