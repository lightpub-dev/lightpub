//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Binary(BlobSize::Blob(Some(16)))"
    )]
    pub id: Vec<u8>,
    pub username: String,
    pub host: String,
    pub bpassword: Option<String>,
    pub nickname: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub bio: Option<String>,
    pub uri: Option<String>,
    pub created_at: DateTime,
    pub deleted_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
    #[sea_orm(has_many = "super::post_like::Entity")]
    PostLike,
    #[sea_orm(has_many = "super::post_mention::Entity")]
    PostMention,
    #[sea_orm(has_many = "super::post_reaction::Entity")]
    PostReaction,
    #[sea_orm(has_many = "super::user_token::Entity")]
    UserToken,
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl Related<super::post_like::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostLike.def()
    }
}

impl Related<super::post_mention::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostMention.def()
    }
}

impl Related<super::post_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PostReaction.def()
    }
}

impl Related<super::user_token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserToken.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
