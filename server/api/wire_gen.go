// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"github.com/lightpub-dev/lightpub/db"
	"github.com/lightpub-dev/lightpub/posts"
	"github.com/lightpub-dev/lightpub/reactions"
	"github.com/lightpub-dev/lightpub/timeline"
	"github.com/lightpub-dev/lightpub/trend"
	"github.com/lightpub-dev/lightpub/users"
)

// Injectors from services.go:

func initializeUserCreateService(c echo.Context, h *Handler) users.UserCreateService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbUserCreateService := users.ProvideDBUserCreateService(dbConn)
	return dbUserCreateService
}

func initializeUserLoginService(c echo.Context, h *Handler) users.UserLoginService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbUserLoginService := users.ProvideDBUserLoginService(dbConn)
	return dbUserLoginService
}

func initializeTimelineService(c echo.Context, h *Handler) timeline.TimelineService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbPostInteractionService := posts.ProvideDBPostInteractionService(dbConn)
	dbPostCountService := posts.ProvideDBPostCountService(dbConn)
	dbUserFollowService := users.ProvideDBUserFollowService(dbConn)
	dbPostVisibilityService := posts.ProvideDBPostVisibilityService(dbConn, dbUserFollowService)
	dbPostFetchService := posts.ProvideDBPostFetchService(dbConn, dbPostVisibilityService, dbPostCountService)
	dbTimelineService := timeline.ProvideDBTimelineService(dbConn, dbPostInteractionService, dbPostCountService, dbPostFetchService)
	return dbTimelineService
}

func initializePostCreateService(c echo.Context, h *Handler) posts.PostCreateService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbUserFollowService := users.ProvideDBUserFollowService(dbConn)
	dbPostVisibilityService := posts.ProvideDBPostVisibilityService(dbConn, dbUserFollowService)
	dbPostCountService := posts.ProvideDBPostCountService(dbConn)
	dbPostFetchService := posts.ProvideDBPostFetchService(dbConn, dbPostVisibilityService, dbPostCountService)
	dbPostCreateService := posts.ProvideDBPostCreateService(dbConn, dbPostVisibilityService, dbPostFetchService)
	return dbPostCreateService
}

func initializePostReactionService(c echo.Context, h *Handler) posts.PostReactionService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbFindReactionService := reactions.ProvideDBFindReactionService(dbConn)
	dbUserFollowService := users.ProvideDBUserFollowService(dbConn)
	dbPostVisibilityService := posts.ProvideDBPostVisibilityService(dbConn, dbUserFollowService)
	dbPostCountService := posts.ProvideDBPostCountService(dbConn)
	dbPostFetchService := posts.ProvideDBPostFetchService(dbConn, dbPostVisibilityService, dbPostCountService)
	dbPostReactionService := posts.ProvideDBPostReactionService(dbConn, dbFindReactionService, dbPostVisibilityService, dbPostFetchService)
	return dbPostReactionService
}

func initializePostLikeService(c echo.Context, h *Handler) posts.PostLikeService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbUserFollowService := users.ProvideDBUserFollowService(dbConn)
	dbPostVisibilityService := posts.ProvideDBPostVisibilityService(dbConn, dbUserFollowService)
	dbPostCountService := posts.ProvideDBPostCountService(dbConn)
	dbPostFetchService := posts.ProvideDBPostFetchService(dbConn, dbPostVisibilityService, dbPostCountService)
	dbPostLikeService := posts.ProvideDBPostLikeService(dbConn, dbPostVisibilityService, dbPostFetchService)
	return dbPostLikeService
}

func initializePostFetchService(c echo.Context, h *Handler) posts.PostFetchService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbUserFollowService := users.ProvideDBUserFollowService(dbConn)
	dbPostVisibilityService := posts.ProvideDBPostVisibilityService(dbConn, dbUserFollowService)
	dbPostCountService := posts.ProvideDBPostCountService(dbConn)
	dbPostFetchService := posts.ProvideDBPostFetchService(dbConn, dbPostVisibilityService, dbPostCountService)
	return dbPostFetchService
}

func initializeTrendServices(c echo.Context, h *Handler) trend.TrendService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbPostCountService := posts.ProvideDBPostCountService(dbConn)
	dbTrendService := trend.ProvideDBTrendService(dbConn, dbPostCountService)
	return dbTrendService
}

func initializeUserFinderService(c echo.Context, h *Handler) users.UserFinderService {
	context := db.ProvideContext(c)
	dbConn := ProvideDBConnFromHandler(context, h)
	dbUserFinderService := users.ProvideDBUserFinder(dbConn)
	return dbUserFinderService
}

// services.go:

func ProvideDBConnFromHandler(ctx db.Context, h *Handler) db.DBConn {
	return db.DBConn{DB: h.DB, Ctx: ctx}
}

var (
	DBSet = wire.NewSet(
		ProvideDBConnFromHandler, db.ProvideContext,
	)
)
