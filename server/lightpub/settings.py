"""
Django settings for lightpub project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import yaml

with open("lightpub.yml", "r") as f:
    config = yaml.safe_load(f)

VERSION = "0.1"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Hostname
HOSTNAME = config["hostname"]
HTTP_SCHEME = config["http_scheme"]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config["secret_key"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config["dev"]["debug"]

# SECURITY WARNING: Always set to True in production
SSL_VERIFY = config["dev"]["ssl_verify"]

ALLOWED_HOSTS = config["allowed_hosts"]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = config["cors_allowed_origins"]

STATIC_ROOT = BASE_DIR / "staticfiles"

# background task runner
CELERY_BROKER_URL = config["background_task_runner"]["broker_url"]
CELERY_RESULT_BACKEND = config["background_task_runner"]["broker_url"]

# Application definition
FRONTEND_URL = config["frontend_url"]

INSTALLED_APPS = [
    "corsheaders",
    "api",
    "frontend",
    "rest_framework",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",
    "django.contrib.staticfiles",
    # "ddrr",
]

if DEBUG:
    INSTALLED_APPS.append("debug_toolbar")

MIDDLEWARE = [
    # "ddrr.middleware.DebugRequestsResponses",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # "api.middlewares.auther.AuthMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

ROOT_URLCONF = "lightpub.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "lightpub.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": config["database"]["name"],
        "USER": config["database"]["user"],
        "PASSWORD": config["database"]["password"],
        "HOST": config["database"]["host"],
        "PORT": config["database"]["port"],
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "api.jsonld.pagination.OrderedCollectionPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_PERMISSION_CLASSES": ["api.auth.permission.NoAuthPermission"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "api.auth.auth.TokenAuth",
        "api.auth.auth.CookieAuth",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "api.jsonld.renderer.JsonldRenderer",
        "api.jsonld.renderer.ActivityJsonRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[%(server_time)s] %(message)s a",
        },
        "api.logger.CustomFormatter": {
            "()": "api.logger.CustomFormatter",
        },
    },
    "handlers": {
        "customcode": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "api.logger.CustomFormatter",
        },
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "DEBUG",
            "propagate": False,
        },
        "api": {"handlers": ["customcode"], "level": "DEBUG", "propagate": True},
    },
}


STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    }
}

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# DDRR = {
#     "ENABLE_REQUESTS": True,  # enable request logging
#     "ENABLE_RESPONSES": True,  # enable response logging
#     "LEVEL": "DEBUG",  # ddrr log level
#     "PRETTY_PRINT": True,  # pretty-print JSON and XML
#     "REQUEST_TEMPLATE_NAME": "ddrr/default-request.html",  # request log template name
#     "REQUEST_TEMPLATE": None,  # request log template string (overrides template name)
#     "RESPONSE_TEMPLATE_NAME": "ddrr/default-response.html",  # response log template name # noqa: E501
#     "RESPONSE_TEMPLATE": None,  # response log template string (overrides template name) # noqa: E501
#     "REQUEST_HANDLER": logging.StreamHandler(),  # request log handler
#     "RESPONSE_HANDLER": logging.StreamHandler(),  # response log handler
#     "ENABLE_COLORS": True,  # enable colors if terminal supports it
#     "LIMIT_BODY": None,  # limit request/response body output to X chars
#     "DISABLE_DJANGO_SERVER_LOG": False,  # disable default django server log
# }

# django-debug-toolbar
INTERNAL_IPS = ["127.0.0.1"]
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,
}
