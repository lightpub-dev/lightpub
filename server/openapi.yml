openapi: '3.0.2'
info:
  title: Lightpub API
  version: '1.0'
servers:
  - url: http://localhost:1323
tags:
  - name: Auth
  - name: Post
  - name: User
  - name: Timeline
  - name: Authorization required
  - name: No authorization
paths:
  /login:
    post:
      tags:
        - Auth
        - No authorization
      security: []
      summary: Login to to the API
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
              required:
                - username
                - password
      responses:
        400:
          description: The request body is invalid.
        401:
          description: Wrong username or password.
        200:
          description: Successfully logged in.
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    description: "Bearer token. Use it in the Authorization header. Authorization: Bearer <token>"
  /register:
    post:
      tags:
        - Auth
        - No authorization
      security: []
      summary: Register a new account.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  pattern: "[0-9a-zA-Z]{1,60}"
                  minLength: 1
                  maxLength: 60
                nickname:
                  type: string
                  minLength: 1
                  maxLength: 200
                password:
                  type: string
                  minLength: 4
                  format: password
              required:
                - username
                - nickname
                - password
      responses:
        400:
          description: Invalid request body.
        409:
          description: Username is already taken.
        201:
          description: Success.
  /post:
    post:
      tags:
        - Post
        - Authorization required
      summary: Create a new post.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        400:
          description: Invalid request body.
        201:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResultResponse"
  /post/{post_id}:
    get:
      tags:
        - Post
        - Authorization required
      summary: Fetch a post.
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      responses:
        400:
          description: Invalid post_id.
        404:
          description: Post not found.
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  post:
                    $ref: "#/components/schemas/UserPostEntry"
                required:
                  - post
  /post/{post_id}/reply:
    post:
      tags:
        - Post
        - Authorization required
      summary: Reply to a post.
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        400:
          description: Invalid request body.
        404:
          description: Post not found.
        201:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResultResponse"
  /post/{post_id}/repost:
    post:
      tags:
        - Post
        - Authorization required
      summary: Repost a post.
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                privacy:
                  $ref: "#/components/schemas/PrivacyType"
              required:
                - privacy
      responses:
        400:
          description: Invalid request body.
        404:
          description: Post not found.
        201:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResultResponse"
  /post/{post_id}/quote:
    post:
      tags:
        - Post
        - Authorization required
      summary: quote a post.
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostRequest"
      responses:
        400:
          description: Invalid request body.
        404:
          description: Post not found.
        201:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResultResponse"
  /post/{post_id}/reaction/{reaction}:
    put:
      summary: Add a reaction to a post.
      tags:
        - Authorization required
        - Post
      parameters:
        - $ref: "#/components/parameters/PathPostID"
        - $ref: "#/components/parameters/PathReactionName"
      responses:
        404:
          description: The post is not available to the user.
        400:
          description: Bad path.
        200:
          description: Success.
    delete:
      summary: Delete a reaction from a post.
      tags:
        - Authorization required
        - Post
      parameters:
        - $ref: "#/components/parameters/PathPostID"
        - $ref: "#/components/parameters/PathReactionName"
      responses:
        404:
          description: The post is not available to the user.
        400:
          description: Bad path.
        200:
          description: Success.
  /post/{post_id}/favorite:
    put:
      summary: Add a post to my favorite list.
      tags:
        - Authorization required
        - Post
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      responses:
        404:
          description: The post is not available to the user.
        400:
          description: Bad path.
        200:
          description: Success.
    delete:
      summary: Delete a post to my favorite list.
      tags:
        - Authorization required
        - Post
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      responses:
        404:
          description: The post is not available to the user.
        400:
          description: Bad path.
        200:
          description: Success.
  /post/{post_id}/bookmark:
    put:
      summary: Add a post to my bookmark list.
      tags:
        - Authorization required
        - Post
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      responses:
        404:
          description: The post is not available to the user.
        400:
          description: Bad path.
        200:
          description: Success.
    delete:
      summary: Delete a post to my bookmark list.
      tags:
        - Authorization required
        - Post
      parameters:
        - $ref: "#/components/parameters/PathPostID"
      responses:
        404:
          description: The post is not available to the user.
        400:
          description: Bad path.
        200:
          description: Success.
  /user/{username}/posts:
    get:
      tags:
        - No authorization
        - User
      parameters:
        - $ref: "#/components/parameters/PathUserSpecifier"
        - $ref: "#/components/parameters/LimitQuery"
      responses:
        404:
          description: User not found.
        400:
          description: Invalid limit.
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPostListResponse"
  /user/{username}/followers:
    get:
      tags:
        - No authorization
        - User
      parameters:
        - $ref: "#/components/parameters/PathUserSpecifier"
        - $ref: "#/components/parameters/LimitQuery"
        - $ref: "#/components/parameters/BeforeDateQuery"
      responses:
        400:
          description: Invalid query.
        404:
          description: Invalid user.
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFollowerResponse"
  /user/{username}/following:
    get:
      tags:
        - No authorization
        - User
      parameters:
        - $ref: "#/components/parameters/PathUserSpecifier"
        - $ref: "#/components/parameters/LimitQuery"
        - $ref: "#/components/parameters/BeforeDateQuery"
      responses:
        400:
          description: Invalid query.
        404:
          description: Invalid user.
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFollowingResponse"
  /user/{username}/follow:
    put:
      tags:
        - No authorization
        - User
      parameters:
        - $ref: "#/components/parameters/PathUserSpecifier"
      responses:
        404:
          description: User not found.
        200:
          description: Success.
    delete:
      tags:
        - No authorization
        - User
      parameters:
        - $ref: "#/components/parameters/PathUserSpecifier"
      responses:
        404:
          description: User not found.
        200:
          description: Success.
  /timeline:
    get:
      tags:
        - Authorization required
        - Timeline
      parameters:
        - name: before_date
          in: query
          description: Fetch posts before this date
          schema:
            type: string
            format: date-time
        - name: after_date
          in: query
          description: Fetch posts after this date
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Limit the number of fetched posts
          schema:
            type: integer
            minimum: 0
            maximum: 100
      summary: Get the timeline.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                properties:
                  posts:
                    $ref: "#/components/schemas/UserPostEntry"
                  latest_post_time:
                    type: string
                    format: date-time
                    description: The timestamp of the latest post included in `posts`. Null if posts.length==0.
                    nullable: true
                  oldest_post_time:
                    type: string
                    format: date-time
                    description: The timestamp of the oldest post included in `posts`. Null if posts.length==0.
                    nullable: true
  /user:
    put:
      tags: [Authorization required, User]
      summary: Update user profile.
      description: Update user profile. Only the fields in the request body are updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileRequest"
      responses:
        200:
          description: OK.
        401:
          description: Unauthorized.
  
  /user/{username}:
    get:
      summary: Get user profile.
      tags:
        - No authorization
        - User
      parameters:
        - $ref: "#/components/parameters/PathUserSpecifier"
      responses:
        404:
          description: User not found.
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFullInfoResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    BeforeDateQuery:
      in: query
      name: before_date
      schema:
        type: string
        format: date-time
      description: Limit the result to the entities created before that datetime.
    LimitQuery:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 0
        maximum: 100
      description: How many posts do you want to fetch?
    PathPostID:
      in: path
      name: post_id
      required: true
      schema:
        type: string
        format: uuid
    PathReactionName:
      in: path
      name: reaction
      required: true
      schema:
        type: string
        example: +1
    PathUserSpecifier:
      in: path
      name: username
      required: true
      schema:
        $ref: "#/components/schemas/UserSpecifier"
  schemas:
    PrivacyType:
      type: string
      enum:
        - public
        - unlisted
        - follower
        - private
    PostRequest:
      properties:
        content:
          type: string
          description: The body of the post.
        privacy:
          $ref: "#/components/schemas/PrivacyType"
        scheduled_at:
          type: string
          format: date-time
          description: The time when the post is published. Null means that the post is published immediately.
          example: null
        poll:
          $ref: "#/components/schemas/PostPollRequest"
      required:
        - content
        - privacy
    PostPollRequest:
      properties:
        allow_multiple:
          type: boolean
          description: Allow multiple choice.
        due:
          type: string
          format: date-time
          nullable: true
          description: The deadline of the poll. Null means that no deadline is set.
        choices:
          type: array
          items:
            type: string
            description: Choice.
          minLength: 2
      required:
        - allow_multiple
        - due
        - choices
    UsernameWithoutHost:
      type: string
      pattern: "@[a-zA-Z0-9_-]+"
      example: "@tinaxd"
    UsernameWithHost:
      type: string
      pattern: "@[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+"
      example: "@tinaxd@lightpub.example.com"
    UserID:
      type: string
      format: uuid
    UserSpecifier:
      oneOf:
        - $ref: "#/components/schemas/UsernameWithoutHost"
        - $ref: "#/components/schemas/UsernameWithHost"
        - $ref: "#/components/schemas/UserID"
    UserPostListResponse:
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/UserPostEntry"
      required:
        - posts
    UserPostEntry:
      properties:
        id:
          type: string
          format: uuid
          description: ID of the post.
        author:
          $ref: "#/components/schemas/UserPostEntryAuthor"
        content:
          type: string
          description: The content of the post. This property is null if this is a repost.
          nullable: true
        created_at:
          type: string
          format: date-time
        privacy:
          $ref: "#/components/schemas/PrivacyType"
        reply_to:
          oneOf:
            - type: string
              format: url
            - $ref: "#/components/schemas/UserPostEntry"
          description: If this post is a reply, this property is defined. The value is either the URL or the post itself.
          example: https://lightpub.example.com/post/aaabbbccc
        repost_of:
          oneOf:
            - type: string
              format: url
            - $ref: "#/components/schemas/UserPostEntry"
          description: If this post is a repost or quote, this property is defined. The value is either the URL or the post itself. content is null if this is a repost. content is non-null if this is a quote.
          example: https://lightpub.example.com/post/aaabbbccc
        repost_count:
          type: integer
          description: The number of reposts of this post.
          minimum: 0
        favorite_count:
          type: integer
          description: The number of favorites of this post.
          minimum: 0
        reply_count:
          type: integer
          description: The number of replies of this post.
          minimum: 0
        quote_count:
          type: integer
          description: The number of quotes of this post.
          minimum: 0
        reactions:
          type: object
          description: The reactions of this post.
          additionalProperties:
            type: integer
            minimum: 0
          example:
            "+1": 3
            "heart": 2
      required:
        - id
        - author
        - content
        - created_at
        - privacy
        - repost_count
        - favorite_count
        - reply_count
        - quote_count
        - reactions
    UserPostEntryAuthor:
      properties:
        id:
          type: string
          format: uuid
          description: The ID of a user. Typically in uuid format.
        username:
          type: string
          example: tinaxd
        host:
          type: string
          example: lightpub.example.com
      required:
        - id
        - username
        - host
    UserInfoResponse:
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: tinaxd
        hostname:
          type: string
          example: lightpub.example.com
        nickname:
          type: string
          example: tinax
        url:
          type: string
          description: URL to the user profile page.
          example: https://lightpub.example.com/user/tinaxd
      required:
        - id
        - username
        - hostname
        - nickname
        - url
    UserFollowerResponse:
      properties:
        followers:
          type: array
          items:
            $ref: "#/components/schemas/UserInfoResponse"
      required:
        - followers
    UserFollowingResponse:
      properties:
        following:
          type: array
          items:
            $ref: "#/components/schemas/UserInfoResponse"
      required:
        - following
    PostResultResponse:
      properties:
        id:
          description: The ID of the created post.
          type: string
          format: uuid
      required:
        - id
    UserLabels:
      type: array
      description: The labels of the user.
      minLength: 0
      maxLength: 4
      items:
        type: object
        properties:
          key:
            type: string
            maxLength: 2000
            example: "Favorite language"
          value:
            type: string
            maxLength: 2000
            example: "Java"
        required:
          - key
          - value
    UserProfileRequest:
      properties:
        bio:
          type: string
          description: The bio of the user.
          maxLength: 2000
          example: "I am a circuit designer."
        labels:
          $ref: "#/components/schemas/UserLabels"
    UserFullInfoResponse:
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: tinaxd
        hostname:
          type: string
          example: lightpub.example.com
        nickname:
          type: string
          example: tinax
        url:
          type: string
          description: URL to the user profile page.
          example: https://lightpub.example.com/user/tinaxd
        bio:
          type: string
        labels:
          $ref: "#/components/schemas/UserLabels"
      required:
        - id
        - username
        - hostname
        - nickname
        - url
        - bio
        - labels
        
security:
  - bearerAuth: []
